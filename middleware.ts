import type { NextRequest } from "next/server"; 

 import { NextResponse } from "next/server"; 

 import { verifySession } from "@/lib/auth"; 



 export async function middleware(req: NextRequest) { 

   const { pathname } = req.nextUrl; 



   // üîí B·ªè qua c√°c file tƒ©nh & API c√¥ng khai 

   if ( 

     pathname.startsWith("/_next") || 

     pathname.startsWith("/favicon.ico") || 

     pathname.startsWith("/public") || 

     pathname.startsWith("/api/login") // cho ph√©p login API kh√¥ng b·ªã block 

   ) { 

     return NextResponse.next(); 

   } 



   // üß© L·∫•y token JWT trong cookie 

   const token = req.cookies.get("auth_token")?.value; 



   // ‚õî N·∫øu ch∆∞a ƒëƒÉng nh·∫≠p ‚Üí redirect sang /login 

   if (!token) { 

     // N·∫øu l√† API /me th√¨ tr·∫£ 401 JSON, kh√¥ng redirect (frontend d√πng fetch) 

     if (pathname.startsWith("/api/")) { 

       return NextResponse.json({ error: "Unauthorized" }, { status: 401 }); 

     } 



     return NextResponse.redirect(new URL("/login", req.url)); 

   } 



   try { 

     const session = await verifySession(token); 



     // üîê N·∫øu truy c·∫≠p /admin m√† kh√¥ng ph·∫£i ADMIN ‚Üí redirect v·ªÅ /me 

     if (pathname.startsWith("/admin") && session.role !== "ADMIN") { 

       return NextResponse.redirect(new URL("/me", req.url)); 

     } 



     // ‚úÖ Token h·ª£p l·ªá ‚Üí cho qua 

     return NextResponse.next(); 

   } catch (err) { 

     console.warn("Invalid or expired token:", err); 



     // N·∫øu token h·ªèng ho·∫∑c h·∫øt h·∫°n 

     if (pathname.startsWith("/api/")) { 

       return NextResponse.json({ error: "Session expired" }, { status: 401 }); 

     } 



     return NextResponse.redirect(new URL("/login", req.url)); 

   } 

 } 



 // Ch·ªâ √°p d·ª•ng cho c√°c route c√≥ prefix /me v√† /admin 

 export const config = { 

   matcher: ["/me/:path*", "/admin/:path*", "/api/me/:path*"], 

 };