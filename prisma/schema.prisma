datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

// -------------------------
// B·∫¢NG USER
// -------------------------
model User {
  id            Int       @id @default(autoincrement())
  email         String    @unique
  name          String?
  dob           DateTime?
  idcard        String?
  role          Role      @default(LEARNER)
  walletAddress String?   @unique
  phone         String?
  address       String?
  avatarUrl     String?
  createdAt     DateTime  @default(now())

  profileCompleted Boolean @default(false)
  name_norm        String?
  phone_e164       String?
  row_version      BigInt  @default(1)

  examResults       ExamResult[]
  certificates      Certificate[]
  notifications     Notification[]
  notificationReads NotificationRead[]
  enrollments       Enrollment[]
}

// -------------------------
// B·∫¢NG COURSE (H·ª¢P NH·∫§T CHO GA)
// -------------------------
model Course {
  id               Int          @id @default(autoincrement())
  title            String
  description      String?
  category         String
  startDate        DateTime?
  endDate          DateTime?
  examDateExpected DateTime?
  status           CourseStatus @default(UPCOMING)
  isPublic         Boolean      @default(true)
  thumbnail        String?
  createdAt        DateTime     @default(now())

  // Li√™n k·∫øt
  examSessions     ExamSession[]
  certificates     Certificate[]
  notifications    Notification[]
  enrollments      Enrollment[]
  lessons          LessonTemplate[]
  scheduledClasses ScheduledClass[]

  // üîß Tr∆∞·ªùng b·ªï sung cho GA Scheduler
  structure_lessons_per_week Int    @default(3)
  structure_lesson_duration  Int    @default(90)
  requirement_qualification  String @default("TOEIC_450")
}

// -------------------------
// B·∫¢NG LESSON TEMPLATE 
// -------------------------
model LessonTemplate {
  id       Int     @id @default(autoincrement())
  title    String  @default("Untitled")
  content  String?
  courseId Int
  course   Course  @relation(fields: [courseId], references: [id])
}

// -------------------------
// B·∫¢NG EXAM SESSION
// -------------------------
model ExamSession {
  id       Int          @id @default(autoincrement())
  courseId Int
  course   Course       @relation(fields: [courseId], references: [id])
  room     String
  date     DateTime
  capacity Int
  results  ExamResult[]
}

// -------------------------
// B·∫¢NG EXAM RESULT
// -------------------------
model ExamResult {
  id            Int        @id @default(autoincrement())
  examSessionId Int
  userId        Int
  score         Int
  status        ExamStatus

  examSession ExamSession  @relation(fields: [examSessionId], references: [id], onDelete: Cascade)
  user        User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  certificate Certificate? @relation("ExamResultToCertificate")

  @@unique([examSessionId, userId])
}

// -------------------------
// B·∫¢NG NOTIFICATION
// -------------------------
model Notification {
  id         Int      @id @default(autoincrement())
  title      String
  content    String
  targetRole Role?
  userId     Int?
  courseId   Int?
  isPinned   Boolean  @default(false)
  createdAt  DateTime @default(now())

  user   User?              @relation(fields: [userId], references: [id])
  course Course?            @relation(fields: [courseId], references: [id])
  reads  NotificationRead[]
}

// -------------------------
// B·∫¢NG NOTIFICATION READ
// -------------------------
model NotificationRead {
  id             Int      @id @default(autoincrement())
  userId         Int
  notificationId Int
  readAt         DateTime @default(now())

  user         User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  notification Notification @relation(fields: [notificationId], references: [id], onDelete: Cascade)

  @@unique([userId, notificationId])
}

// -------------------------
// B·∫¢NG CERTIFICATE
// -------------------------
model Certificate {
  id           Int      @id @default(autoincrement())
  userId       Int
  courseId     Int
  examResultId Int?     @unique
  tokenId      String   @unique
  ipfsCid      String   @unique
  issuedAt     DateTime @default(now())
  revoked      Boolean  @default(false)
  updatedAt    DateTime @updatedAt

  user       User        @relation(fields: [userId], references: [id])
  course     Course      @relation(fields: [courseId], references: [id])
  examResult ExamResult? @relation("ExamResultToCertificate", fields: [examResultId], references: [id])

  @@unique([userId, courseId])
}

// -------------------------
// B·∫¢NG ENROLLMENT
// -------------------------
model Enrollment {
  id             Int          @id @default(autoincrement())
  userId         Int
  courseId       Int
  status         EnrollStatus @default(PENDING)
  availableSlots String[]     @default([])
  enrolledAt     DateTime     @default(now())

  user                 User                  @relation(fields: [userId], references: [id])
  course               Course                @relation(fields: [courseId], references: [id])
  scheduledEnrollments ScheduledEnrollment[]

  @@unique([userId, courseId])
}

// -------------------------
model Teacher {
  id           String   @id @default(cuid())
  name         String
  availability String[] // v√≠ d·ª• ["Mon_EVENING_1", "Wed_EVENING_2"]
  createdAt    DateTime @default(now())
  updatedAt    DateTime @default(now()) @updatedAt

  qualifications   TeacherQualification[]
  scheduledClasses ScheduledClass[]
}

model Qualification {
  id          String   @id @default(cuid())
  name        String // V√≠ d·ª•: "TOEIC 250+", "TOEIC 900+", "Tin h·ªçc A", "Excel n√¢ng cao"
  category    String // TOEIC, IELTS, TIN_HOC, ENGLISH, ...
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  teachers TeacherQualification[]
}

// üîó B·∫£ng trung gian cho quan h·ªá N‚ÄìN
model TeacherQualification {
  id              String        @id @default(cuid())
  teacherId       String
  qualificationId String
  teacher         Teacher       @relation(fields: [teacherId], references: [id])
  qualification   Qualification @relation(fields: [qualificationId], references: [id])
}

// -------------------------
// B·∫¢NG PH√íNG H·ªåC
// -------------------------
model Room {
  id               String           @id
  capacity         Int
  availability     String[]         @default([])
  scheduledClasses ScheduledClass[]

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

// -------------------------
// B·∫¢NG L·ªäCH H·ªåC ƒê√É X·∫æP (AI T·∫†O RA)
// -------------------------
model ScheduledClass {
  id        Int      @id @default(autoincrement())
  courseId  Int
  teacherId String
  roomId    String
  dayOfWeek String // "Mon", "Tue", "Wed", ...
  timeSlot  String // "EVENING_1", "EVENING_2", ...
  startDate DateTime
  endDate   DateTime
  createdAt DateTime @default(now())

  // üîó Quan h·ªá
  course               Course                @relation(fields: [courseId], references: [id])
  teacher              Teacher               @relation(fields: [teacherId], references: [id])
  room                 Room                  @relation(fields: [roomId], references: [id])
  scheduledEnrollments ScheduledEnrollment[]
}

model ScheduledEnrollment {
  id               Int      @id @default(autoincrement())
  scheduledClassId Int
  enrollmentId     Int
  assignedAt       DateTime @default(now())

  // Quan h·ªá
  scheduledClass ScheduledClass @relation(fields: [scheduledClassId], references: [id])
  enrollment     Enrollment     @relation(fields: [enrollmentId], references: [id])

  @@unique([scheduledClassId, enrollmentId])
}

// -------------------------
// ENUMS
// -------------------------
enum EnrollStatus {
  PENDING
  ACTIVE
  COMPLETED
  CANCELED
}

enum Role {
  ADMIN
  LEARNER
  ALL
}

enum ExamStatus {
  PENDING
  PASS
  FAIL
}

enum CourseStatus {
  UPCOMING
  ONGOING
  COMPLETED
  CLOSED
}
