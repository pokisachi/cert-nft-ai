datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

// -------------------------
// B·∫¢NG USER
// -------------------------
model User {
  id             Int             @id @default(autoincrement())
  email          String          @unique
  name           String?
  dob            DateTime?
  idcard         String?
  role           Role            @default(LEARNER)
  walletAddress  String?         @unique
  phone          String?
  address        String?
  avatarUrl      String?
  createdAt      DateTime        @default(now())

  // H·ªì s∆° c√° nh√¢n
  profileCompleted Boolean       @default(false)
  name_norm        String?
  phone_e164       String?
  row_version      BigInt        @default(1)

  // Li√™n k·∫øt
  examResults       ExamResult[]
  certificates      Certificate[]
  notifications     Notification[]
  notificationReads NotificationRead[]
  enrollments       Enrollment[]
}

// -------------------------
// B·∫¢NG COURSE
// -------------------------
model Course {
  id               Int           @id @default(autoincrement())
  title            String
  description      String?
  category         String
  startDate        DateTime?
  endDate          DateTime?
  examDateExpected DateTime?
  status           CourseStatus  @default(UPCOMING)
  isPublic         Boolean       @default(true)
  thumbnail        String?
  createdAt        DateTime      @default(now())

  // Li√™n k·∫øt
  examSessions     ExamSession[]
  certificates     Certificate[]
  notifications    Notification[]
  enrollments      Enrollment[]
}

// -------------------------
// B·∫¢NG EXAM SESSION
// -------------------------
model ExamSession {
  id        Int          @id @default(autoincrement())
  courseId  Int
  course    Course       @relation(fields: [courseId], references: [id])
  room      String
  date      DateTime
  capacity  Int
  results   ExamResult[]
}

// -------------------------
// B·∫¢NG EXAM RESULT
// -------------------------
model ExamResult {
  id             Int            @id @default(autoincrement())
  examSessionId  Int
  userId         Int
  score          Int
  status         ExamStatus

  examSession    ExamSession    @relation(fields: [examSessionId], references: [id], onDelete: Cascade)
  user           User           @relation(fields: [userId], references: [id], onDelete: Cascade)

  // üîó Quan h·ªá 1‚Äì1 t·ªõi Certificate
  certificate    Certificate?   @relation("ExamResultToCertificate")

  @@unique([examSessionId, userId]) // 1 user ch·ªâ c√≥ 1 k·∫øt qu·∫£ cho 1 ca thi
}

// -------------------------
// B·∫¢NG NOTIFICATION
// -------------------------
model Notification {
  id          Int       @id @default(autoincrement())
  title       String
  content     String
  targetRole  Role?
  userId      Int?
  courseId    Int?
  isPinned    Boolean   @default(false)
  createdAt   DateTime  @default(now())

  user        User?     @relation(fields: [userId], references: [id])
  course      Course?   @relation(fields: [courseId], references: [id])
  reads       NotificationRead[]
}

// -------------------------
// B·∫¢NG NOTIFICATION READ
// -------------------------
model NotificationRead {
  id              Int      @id @default(autoincrement())
  userId          Int
  notificationId  Int
  readAt          DateTime @default(now())

  user            User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  notification    Notification @relation(fields: [notificationId], references: [id], onDelete: Cascade)

  @@unique([userId, notificationId])
}

// -------------------------
// B·∫¢NG CERTIFICATE (NFT ch·ª©ng ch·ªâ)
// -------------------------
model Certificate {
  id            Int           @id @default(autoincrement())
  userId        Int
  courseId      Int
  examResultId  Int?          @unique // m·ªói k·∫øt qu·∫£ thi ch·ªâ c√≥ 1 ch·ª©ng ch·ªâ
  tokenId       String        @unique // NFT token ID
  ipfsCid       String        @unique // CID IPFS
  issuedAt      DateTime      @default(now())
  revoked       Boolean       @default(false)
  updatedAt     DateTime      @updatedAt

  user          User          @relation(fields: [userId], references: [id])
  course        Course        @relation(fields: [courseId], references: [id])
  examResult    ExamResult?   @relation("ExamResultToCertificate", fields: [examResultId], references: [id])

  @@unique([userId, courseId]) // tr√°nh c·∫•p tr√πng cho c√πng h·ªçc vi√™n + kh√≥a
}

// -------------------------
// B·∫¢NG ENROLLMENT
// -------------------------
model Enrollment {
  id             Int          @id @default(autoincrement())
  userId         Int
  courseId       Int
  status         EnrollStatus @default(PENDING)
  preferredDays  String?      // CSV: "Th·ª© 2,Th·ª© 4,Th·ª© 6"
  preferredTime  String?      // "17h45‚Äì19h15"
  enrolledAt     DateTime     @default(now())

  user           User         @relation(fields: [userId], references: [id])
  course         Course       @relation(fields: [courseId], references: [id])

  @@unique([userId, courseId])
}

// -------------------------
// ENUM
// -------------------------
enum EnrollStatus {
  PENDING
  ACTIVE
  COMPLETED
  CANCELED
}

enum Role {
  ADMIN
  LEARNER
  ALL
}

enum ExamStatus {
  PENDING
  PASS
  FAIL
}

enum CourseStatus {
  UPCOMING
  ONGOING
  COMPLETED
  CLOSED
}
