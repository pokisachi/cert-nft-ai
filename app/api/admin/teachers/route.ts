import { NextResponse } from "next/server";
import { prisma } from "@/lib/prisma";

// üß© L·∫•y danh s√°ch gi·∫£ng vi√™n
export async function GET() {
  const teachers = await prisma.teacher.findMany({
    include: {
      qualifications: {
        include: { qualification: true },
      },
    },
    orderBy: { createdAt: "desc" },
  });

  // G·ªôp d·ªØ li·ªáu cho UI (flatten qualifications)
  const formatted = teachers.map((t) => ({
    ...t,
    qualifications: t.qualifications.map((q) => q.qualification.name),
  }));

  return NextResponse.json(formatted);
}

// üß© T·∫°o gi·∫£ng vi√™n m·ªõi
export async function POST(req: Request) {
  try {
    const body = await req.json();
    const { name, availability, qualificationIds } = body;

    if (!name) {
      return NextResponse.json({ error: "Thi·∫øu t√™n gi·∫£ng vi√™n" }, { status: 400 });
    }

    // üß† Ki·ªÉm tra chuy√™n m√¥n
    if (!Array.isArray(qualificationIds) || qualificationIds.length === 0) {
      return NextResponse.json({ error: "Ch∆∞a ch·ªçn chuy√™n m√¥n" }, { status: 400 });
    }

    // üß© T·∫°o gi·∫£ng vi√™n v√† g√°n chuy√™n m√¥n qua b·∫£ng trung gian
    const teacher = await prisma.teacher.create({
      data: {
        name,
        availability,
        qualifications: {
          create: qualificationIds.map((id: string) => ({
            qualification: { connect: { id } },
          })),
        },
      },
      include: {
        qualifications: { include: { qualification: true } },
      },
    });

    return NextResponse.json({
      message: "T·∫°o gi·∫£ng vi√™n th√†nh c√¥ng!",
      teacher,
    });
  } catch (error) {
    console.error("‚ùå L·ªói t·∫°o gi·∫£ng vi√™n:", error);
    return NextResponse.json({ error: "L·ªói m√°y ch·ªß khi t·∫°o gi·∫£ng vi√™n." }, { status: 500 });
  }
}
